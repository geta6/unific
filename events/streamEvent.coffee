###

  StreamEvent.coffee

###

module.exports.StreamEvent = (app) ->

  async  = require 'async'
  parser = require 'parse-rss'
  RSS    = require 'rss'
  _      = require 'underscore'

  Stream = app.get("models").Stream
  Feed   = app.get("models").Feed
  Page   = app.get("models").Page

  ###
  # http request
  ###

  index: (req,res,next) ->
    title = req.params.stream
    Stream.findByTitle title,(err,stream)->
      if stream?
        return render(res,stream)
      else 
        Stream.create 
          title:title
          description:'description (click to edit)'
        ,(err,stream)->
          return render(res,stream)

  rss  : (req,res,next) ->
    streamname = req.params.stream
    @findArticlesByStream streamname, (err,articles)->
      return socket.emit 'error' if err
      # lets create an rss feed 
      feed = new RSS
        title: "#{streamname} - Unific"
        description: "Generated By Unific"
        feed_url: "http://unific.net/#{streamname}rss"
        site_url: "http://unific.net/#{streamname}"
        author: "Unific"
        webMaster: "nikezono"
        copyright: "2013 nikezono.net"
        pubDate: articles[0].page.pubDate
      
      async.forEach articles,(article,cb)->
        # loop over data and add to feed 
        feed.item
          title: article.page.title
          description: article.page.description
          url: article.page.url
          author: article.feed.title # optional - defaults to feed author property
          date: article.page.pubDate
        cb()
      ,->
        xml = feed.xml()
        console.log xml
        res.writeHead 200,
          "Content-Type": "text/xml"
        res.write xml
        res.end()

  ###
  # socket.io events
  ###
  getFeedList: (socket) ->
    console.log socket

  sync : (socket,io,stream) ->
    streamname = decodeURIComponent stream
    @findArticlesByStream streamname, (err,articles)->
      return socket.emit 'error' if err
      # Sync Completed
      socket.emit 'sync completed',  articles
      console.log "#{socket.id} is sync"

      

  changeProperty: (socket,io,data) ->
    console.log socket

  ###
  # Helper Methods
  ###
  findArticlesByStream: (streamname,callback)->
    Stream.findOne title:streamname,(err,stream)->
      return callback err,null if err
      # Feedの検索
      Feed.find stream:stream._id,{},{},(err,feeds)->
        feed_pages = []
        # 各ArticleのMerge
        async.forEach feeds,(feed,cb)->
          console.log feed
          parser feed.url, (articles)->
            console.log articles
            Page.findAndUpdateByArticles articles,feed,(pages)->
              return callback err,null if err
              feed_pages = feed_pages.concat pages
              cb()
        ,->
          # uniqued
          uniqued = _.uniq feed_pages,false,(obj)->
            return obj.page.link or obj.page.title or obj.page.description
          
          # sorted(更新降順)
          sorted = _.sortBy(uniqued, (obj)->
            return obj.page.pubDate.getTime())

          return callback null, sorted


###
# Private Methods
###
render = (res,stream)->
  res.render 'stream',
    title: stream.title
    description: stream.description
    feeds: stream.feeds
    rss  : "/#{stream.title}/rss"